from sage.all import *
from Crypto.Util.number import isPrime, inverse, long_to_bytes
N1= 2333306976943597454225085533361633020194404230008035776153801381513862484865701812113052313258381957765439857016887571594522250942905514260415797239201878774837931140452853667729181205038497947656079860617634242902196959994230172290632984986431137642290177493440700865236987554888559847090283218268783523178882024953756255015042716562777318726009269576363539330196776127684788347901346556242950604323817412935806396736542076237655180678257381767874525549210686154406142049154686509401096028859219264459387706351294757519467644331226429703376462992012082940695513190048282954110028285924223729820894595910296221760809110609593532527381812347323346207943418131374151713163682033433545150207526349953101679717672355438749577645889608942938195441508571482717720769497566625928375953484466866496375160127764883581225887220531969853825147387294627086905238311116227595210088770195485573998506101423573543821395517632049465104908741
N2= 432690995420878162475019627361431851157668067945395183969207185030815659530918759738216661826347154953685051460984551551521611137313824519831579056339512086188488878407737010084703110827500688616778269519628370553848737176680496636133356160930607049376686014050565471239917801645249949605588598894001297698855585905792246239988968871691480967238288190460496118265235835137960461988610985211416339367393436923751235246119341624432720066190810425485883384902531074843302723311840444100489319173021356104482568892221255233202641003490801804034549760459532118662378871018234909213946091774793588382398846028007590606217448528320643436334604473719445994875712256387417360872616683859147134238627081850540642148156534835892636303062084586543529073303123047865777238367963616659003861379472674009756546692359184094250667435024714971885370246855826268205381301218818873057748435656654373213000805495506598918554035261104525052703126547756163672229520240849767946816695920255942798742540700913865031746126806475826471620559955436057798021056268182527523587284003854667107162103587883109080593714773625598357800830447535924971213694136359357962173666108311136934618924164383408903289821584521112576358370964852470133978858382375665586111706221
C1= 98590883495737956623041054077721184731461930237482881391800143621818214727591726138297225380926789011179373910789544244851689118518429666197262495105927485861034601282152239351921688928262876853551619469246540154930281945797410686298318481663157342253311427493139831454362713561367805309232298212554368999277132647243004406956866425332264253222352807960376665275330056984311521270350379505058048319527175184352025124497258382319100709025387266902801965666730414475290019364447120122028094187042087637823462061877144174967934656787338521127673727225233021125608067774842735289884534712897063610859136028293950658351096416463612768004329531538378835842306094471683138190680446268092644699522730293899978688913315763465241469630067885733376906386981443749049524226285919354250902181327835336573101185177419666896274421782356943840450295390861780026711296577986951899391129783383187603279505300311250804032021812544559512001267
C2= 244793408394144620625906526245810949239027282539850056635491839211323340975228528458863218125689135784766052429612500288325552430243469939987918108187549880269224430704075589737558146791834511851364732728695273369197576455104483154167395851743963944725051746623676858292162376356170617705437480370836967642125553191143351171509669733284277240438492877890114169271411479825354287469657871534469251946840629545964111158253601931023092057306503863726067778789499875657941709844024260059322138759826756468247448283998146396104305590906093914543452403629301936546268260535307202434770127155347433746269464807954330669424306605545914423558095111840061622609370806176929109261550560960043861211776428175904796765742258345518959614166737518197915305184392303510790444545040428482748708652664717388017995144377246329808036008716076067484446520058474018656261760785468385800248484894000974514705966807668259628068451815353940920804864717480112060464387964115496164090190022674001814827310103920502971465400975371147125443040177343778896236097391033840190150704743301998565249662783599807730736607478602358884129936173095626107482008190269815097455288894768532906686116410138572579493747371706594603171207671902056231829347855687632551200887787
i= 512
while True:
    i+= 2
    print(f"Trying i: {i}")
    R = Zmod(N1*N2)
    PR = PolynomialRing(R, 'x')
    x = PR.gen()
    f = N1 + i*x
    roots = f.monic().small_roots(X=2**1024, beta=0.4)
    if roots:
        p_candidate = int(max(roots))
        if isPrime(p_candidate):
            print(f"p: {p_candidate}")
            break

q= N1 // p_candidate

phi1 = (p_candidate - 1) * (q - 1)
m=pow(C1, inverse(65537, phi1), N1)
m=print(long_to_bytes(m))
#shellmates{n3VEr_UnD3R3$tImatE_$m4LL_ro0ts!!}
